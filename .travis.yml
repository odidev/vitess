# Travis CI configuration for Vitess.
#
# Note that we have our own test runner written in Go (test.go) which downloads
# our bootstrap Docker image and runs all tests within Docker.
# This solution is slower than running the tests natively, but has the
# advantage that we do not have to install (and cache) any dependencies within
# Travis itself.
#
# For the record, we expect the following overhead per Travis build:
# - 20 seconds Travis starting up the VM.
# - Up to 2 minutes to pull the Docker image.
# - More than a minute to run "make build" and cache the result as temporary
#   Docker image.
#
# In total, it will always take up to 4 minutes until the environment is
# bootstrapped and the first test can be run.
#
# Open TODOs:
# - Re-add travis/check_make_proto.sh, ideally as part of test/config.json.
# - Add a presubmit which checks that if bootstrap has changed, and docker image is out of date.

# sudo is required because we run Docker in our builds.
# See: https://docs.travis-ci.com/user/docker/

dist: focal
sudo: required

jobs:
  include:
    - arch: arm64-graviton2
      virt: vm
      group: edge

services:
  - docker

language: go
go:
  - 1.18.2
go_import_path: vitess.io/vitess
env:
  global:
    # Run go build and test with -p 4 (i.e. up to 4 packages are compiled/tested in parallel).
    # As of 07/2015 this value works best in a Travis CI container.
    # TODO(mberlin): This will probably not be passed through to Docker. Verify and fix this.
    - VT_GO_PARALLEL_VALUE=4
    # Note: The per test timeout must always be < 10 minutes because test.go
    #       does not produce any log output while running and Travis kills a
    #       build after 10 minutes without log output.
    #       See: https://docs.travis-ci.com/user/customizing-the-build#Build-Timeouts
    # To diagnose stuck tests, add "-follow" to TEST_FLAGS below. Then test.go
    # will print the test's output.
    - TEST_FLAGS="-docker -use_docker_cache -timeout=8m -print-log"
  matrix:
    # NOTE: Travis CI schedules up to 5 tests simultaneously.
    #       All our tests should be spread out as evenly as possible across these 5 slots.
    #       We should always utilize all 5 slots because the cost of the setup is high (up to four minutes).
    - TEST_MATRIX="-shard 0"
    - TEST_MATRIX="-shard 1"
    - TEST_MATRIX="-shard 2"
script:
  - echo '1024 65535' | sudo tee -a /proc/sys/net/ipv4/ip_local_port_range
  - echo "fs.aio-max-nr = 1048576" | sudo tee -a /etc/sysctl.conf
  - sudo sysctl -p /etc/sysctl.conf
  - export DEBIAN_FRONTEND="noninteractive"
  - sudo apt-get update
  - sudo apt-get install -y mysql-server mysql-client
  - sudo apt-get install -y make unzip g++ curl git wget ant openjdk-8-jdk eatmydata
  - sudo service mysql stop
  - sudo bash -c "echo '/usr/sbin/mysqld { }' > /etc/apparmor.d/usr.sbin.mysqld" # https://bugs.launchpad.net/ubuntu/+source/mariadb-10.1/+bug/1806263
  - sudo ln -s /etc/apparmor.d/usr.sbin.mysqld /etc/apparmor.d/disable/
  - sudo apparmor_parser -R /etc/apparmor.d/usr.sbin.mysqld || echo "could not remove mysqld profile"
  - mkdir -p dist bin
  - curl -L https://github.com/coreos/etcd/releases/download/v3.3.10/etcd-v3.3.10-linux-amd64.tar.gz | tar -zxC dist
  - mv dist/etcd-v3.3.10-linux-amd64/{etcd,etcdctl} bin/
  - go mod download
  -  go install golang.org/x/tools/cmd/goimports@latest
  - make tools
  - eatmydata -- make unit_test
